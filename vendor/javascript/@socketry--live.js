import e from"morphdom";class Live{static start(e={}){let t=e.window||globalThis;let i=e.path||"live";let s=e.base||t.location.href;let r=new URL(i,s);r.protocol=r.protocol.replace("http","ws");return new this(t,r)}constructor(e,t){this.window=e;this.document=e.document;this.url=t;this.events=[];this.failures=0;this.reconnectTimer=null;this.document.addEventListener("visibilitychange",(()=>this.handleVisibilityChange()));this.handleVisibilityChange();const i=this.window.Node.ELEMENT_NODE;this.observer=new this.window.MutationObserver(((e,t)=>{for(let t of e)if(t.type==="childList"){for(let e of t.removedNodes)if(e.nodeType===i){e.classList?.contains("live")&&this.unbind(e);for(let t of e.getElementsByClassName("live"))this.unbind(t)}for(let e of t.addedNodes)if(e.nodeType===i){e.classList.contains("live")&&this.bind(e);for(let t of e.getElementsByClassName("live"))this.bind(t)}}}));this.observer.observe(this.document.body,{childList:true,subtree:true})}connect(){if(this.server)return this.server;let e=this.server=new this.window.WebSocket(this.url);if(this.reconnectTimer){clearTimeout(this.reconnectTimer);this.reconnectTimer=null}e.onopen=()=>{this.failures=0;this.flush();this.attach()};e.onmessage=e=>{const[t,...i]=JSON.parse(e.data);this[t](...i)};e.addEventListener("error",(()=>{this.failures+=1}));e.addEventListener("close",(()=>{if(this.server&&!this.reconnectTimer){const e=Math.max(100*(this.failures+1)**2,6e4);this.reconnectTimer=setTimeout((()=>{this.reconnectTimer=null;this.connect()}),e)}this.server===e&&(this.server=null)}));return e}disconnect(){if(this.server){const e=this.server;this.server=null;e.close()}if(this.reconnectTimer){clearTimeout(this.reconnectTimer);this.reconnectTimer=null}}send(e){if(this.server)try{return this.server.send(e)}catch(e){}this.events.push(e)}flush(){if(this.events.length===0)return;let e=this.events;this.events=[];for(var t of e)this.send(t)}handleVisibilityChange(){this.document.hidden?this.disconnect():this.connect()}bind(e){console.log("bind",e.id,e.dataset);this.send(JSON.stringify(["bind",e.id,e.dataset]))}unbind(e){console.log("unbind",e.id,e.dataset);this.server&&this.send(JSON.stringify(["unbind",e.id]))}attach(){for(let e of this.document.getElementsByClassName("live"))this.bind(e)}createDocumentFragment(e){return this.document.createRange().createContextualFragment(e)}reply(e){e?.reply&&this.send(JSON.stringify(["reply",e.reply]))}update(t,i,s){let r=this.document.getElementById(t);let n=this.createDocumentFragment(i);e(r,n);this.reply(s)}replace(t,i,s){let r=this.document.querySelectorAll(t);let n=this.createDocumentFragment(i);r.forEach((t=>e(t,n.cloneNode(true))));this.reply(s)}prepend(e,t,i){let s=this.document.querySelectorAll(e);let r=this.createDocumentFragment(t);s.forEach((e=>e.prepend(r.cloneNode(true))));this.reply(i)}append(e,t,i){let s=this.document.querySelectorAll(e);let r=this.createDocumentFragment(t);s.forEach((e=>e.append(r.cloneNode(true))));this.reply(i)}remove(e,t){let i=this.document.querySelectorAll(e);i.forEach((e=>e.remove()));this.reply(t)}dispatchEvent(e,t,i){let s=this.document.querySelectorAll(e);s.forEach((e=>e.dispatchEvent(new this.window.CustomEvent(t,i))));this.reply(i)}forward(e,t){this.connect();this.send(JSON.stringify(["event",e,t]))}forwardEvent(e,t,i){t.preventDefault();this.forward(e,{type:t.type,detail:i})}forwardFormEvent(e,t,i){t.preventDefault();let s=t.form;let r=new FormData(s);this.forward(e,{type:t.type,detail:i,formData:[...r]})}}export{Live};
//# sourceMappingURL=Live.js.map